

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
from statsmodels.formula.api import ols
from statsmodels.stats.anova import anova_lm
import pandas as pd
import seaborn as sns

X = np.array([
10,
9,
5,
5,
5,
3,
7,
6,
1,
3,
1,
9,
5,
4,
4,
2,
1,
8,
7,
3,
7,
1,
7,
4,
2,
5,
5,
4,
5,
0,
7,
1,
6,
7,
0,
2,
1,
6,
5,
0,
0,
5,
6,
4,
8,
9,
3,
0,
1,
4,
1,
3,
5,
5,
0,
8,
7,
1,
5,
2,
3,
4,
0,
8,
6,
6,
5,

])
y = np.array([
37.9,
42.2,
47.3,
54.8,
43.1,
32.1,
40.3,
46.7,
18.8,
22.1,
41.4,
58.1,
39.3,
23.8,
34.3,
50.5,
37.4,
42.3,
47.7,
29.3,
51.6,
24.6,
47.9,
38.8,
27,
56.2,
33.6,
47,
57.1,
22.1,
25,
34.2,
49.3,
55.1,
27.3,
22.9,
25.3,
47.7,
46.2,
15.9,
18.2,
34.7,
34.1,
53.9,
38.3,
42,
61.5,
13.4,
13.2,
44.2,
20.7,
27,
38.9,
51.7,
13.7,
41.9,
53.5,
22.6,
42.4,
21.3,
27.7,
55,
25.3,
44.3,
50.7,
36.2,
42,


])

beta1hat, beta0hat, r_value, p_value, std_err = stats.linregress(X, y)
print('beta0hat = {0:.2f}, beta1hat = {1:.2f}'.format(beta0hat, beta1hat))
print('r_value = {0:.3f}, r_squared = {1:.3f}'.format(r_value, r_value**2))

plt.plot(X, y, 'o', label='original data')
plt.plot(X, beta0hat + beta1hat*X, 'r', label='fitted line')
plt.xlabel('number of convenience stores')
plt.ylabel('house price of unit area')
plt.legend()
plt.show()

#Using pandas & ols
data = np.column_stack((X, y))
df = pd.DataFrame(data, columns=['number of convenience stores', 'house price of unit area'])
df.describe()
sns.jointplot(x='number of convenience stores',y='house price of unit area',data=df)
sns.pairplot(df)
#Create a linear model plot Selling price vs Asking price
#sns.lmplot(x='Asking price',y='Selling price',data=df)
plt.figure()
sns.regplot(x='number of convenience stores',y='house price of unit area', data=df, fit_reg=True)

# Fit the model
formula = 'y ~ X'
model = ols(formula, df).fit()
# Print the summary
print(model.summary())

#Peform analysis of variance on fitted linear model
table = anova_lm(model)
print('\nANOVA table')
print(table)

#Hypothesis test
f0 = 1085.98
n = len(X)
alpha = 0.05
#ppf (Percent point function)
f_alpha = stats.f.ppf(1-alpha, 1, n-2)
print('alpha = {0:.2f}, f_alpha = {1:.2f}'.format(alpha, f_alpha))

# Retrieve the parameter estimates
beta0, beta1 = model._results.params
plt.figure()
plt.plot(X, y, 'o')
yhat = beta0 + X*beta1
plt.plot(X, yhat)
plt.xlabel('X')
plt.ylabel('y')
plt.show()

#Residual plot
plt.figure()
plt.scatter(yhat, y - yhat, c='g', s = 40)
plt.hlines(y=0, xmin=20, xmax=60, colors ="r", linewidth=2)
plt.gca().set_xlim(left=20, right=60)
plt.ylim(-30, 30)
plt.title('Residual plot')
plt.xlabel('$\hat{y}$', fontsize=14)
plt.ylabel('Residuals', fontsize=14)
